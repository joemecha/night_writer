require 'minitest/autorun'
require 'minitest/pride'
require './lib/translator'
require './lib/dictionary'
require './lib/message'

class TranslatorTest < Minitest::Test
  def setup
    @characters_1 = "abc"
    @message_1 = Message.new
    @message_1.add_content(@characters_1)
    @translator = Translator.new(@message_1)
  end

  def test_it_exists
    assert_instance_of Translator, @translator
  end

  def test_it_has_attributes
    assert_equal @message_1, @translator.message
  end

  def test_translate_to_braille
    expected = "0.0.00\n..0...\n......"

    assert_equal expected, @translator.translate_to_braille
  end

def test_translate_to_english
    characters_2 = "0.0.00\n..0...\n......"
    message_2 = Message.new
    message_2.add_content(characters_2)
    translator2 = Translator.new(@message_2)
    expected = "def"

    assert_equal expected, @translator2.translate_to_english
  end

  def test_translate
    expected = "0.0.00\n..0...\n......"
    assert_equal expected, @translator.translate
  end

  def test_create_array_of_braille
    array = ["a", "b", "c"]
    expected = [[["0", "."], [".", "."], [".", "."]], [["0", "."], ["0", "."],
                [".", "."]], [["0", "0"], [".", "."], [".", "."]]]

    assert_equal expected, @translator.create_array_of_braille(array)
  end

  def test_convert_braille_array_to_string
    array = [[["0", "."], [".", "."], [".", "."]], [["0", "."], ["0", "."],
                [".", "."]], [["0", "0"], [".", "."], [".", "."]]]
    expected = "0.0.00\n..0...\n......"

    assert_equal expected, @translator.convert_braille_array_to_string(array)
  end

  def test_width_greater_than_80
    array = [[["0", "0"], [".", "."], [".", "."]],
             [["0", "0"], [".", "."], [".", "."]],
             [["0", "0"], [".", "."], [".", "."]],
             [["0", "0"], [".", "."], [".", "."]],
             [["0", "0"], [".", "."], [".", "."]],
             [["0", "0"], [".", "."], [".", "."]],
             [["0", "0"], [".", "."], [".", "."]],
             [["0", "0"], [".", "."], [".", "."]],
             [["0", "0"], [".", "."], [".", "."]],
             [["0", "0"], [".", "."], [".", "."]],
             [["0", "0"], [".", "."], [".", "."]],
             [["0", "0"], [".", "."], [".", "."]],
             [["0", "0"], [".", "."], [".", "."]],
             [["0", "0"], [".", "."], [".", "."]],
             [["0", "0"], [".", "."], [".", "."]],
             [["0", "0"], [".", "."], [".", "."]],
             [["0", "0"], [".", "."], [".", "."]],
             [["0", "0"], [".", "."], [".", "."]],
             [["0", "0"], [".", "."], [".", "."]],
             [["0", "0"], [".", "."], [".", "."]],
             [["0", "0"], [".", "."], [".", "."]],
             [["0", "0"], [".", "."], [".", "."]],
             [["0", "0"], [".", "."], [".", "."]],
             [["0", "0"], [".", "."], [".", "."]],
             [["0", "0"], [".", "."], [".", "."]],
             [["0", "0"], [".", "."], [".", "."]],
             [["0", "0"], [".", "."], [".", "."]],
             [["0", "0"], [".", "."], [".", "."]],
             [["0", "0"], [".", "."], [".", "."]],
             [["0", "0"], [".", "."], [".", "."]],
             [["0", "0"], [".", "."], [".", "."]],
             [["0", "0"], [".", "."], [".", "."]],
             [["0", "0"], [".", "."], [".", "."]],
             [["0", "0"], [".", "."], [".", "."]],
             [["0", "0"], [".", "."], [".", "."]],
             [["0", "0"], [".", "."], [".", "."]],
             [["0", "0"], [".", "."], [".", "."]],
             [["0", "0"], [".", "."], [".", "."]],
             [["0", "0"], [".", "."], [".", "."]],
             [["0", "0"], [".", "."], [".", "."]],
             [["0", "."], [".", "0"], ["0", "."]],
            ]
    expected = "00000000000000000000000000000000000000000000000000000000000000000000000000000000
................................................................................
................................................................................
0.
.0
0."

    assert_equal expected, @translator.convert_braille_array_to_string(array)
  end

  def test_width_greater_than_160
    array = [[["0", "0"], [".", "."], [".", "."]],
             [["0", "0"], [".", "."], [".", "."]],
             [["0", "0"], [".", "."], [".", "."]],
             [["0", "0"], [".", "."], [".", "."]],
             [["0", "0"], [".", "."], [".", "."]],
             [["0", "0"], [".", "."], [".", "."]],
             [["0", "0"], [".", "."], [".", "."]],
             [["0", "0"], [".", "."], [".", "."]],
             [["0", "0"], [".", "."], [".", "."]],
             [["0", "0"], [".", "."], [".", "."]],
             [["0", "0"], [".", "."], [".", "."]],
             [["0", "0"], [".", "."], [".", "."]],
             [["0", "0"], [".", "."], [".", "."]],
             [["0", "0"], [".", "."], [".", "."]],
             [["0", "0"], [".", "."], [".", "."]],
             [["0", "0"], [".", "."], [".", "."]],
             [["0", "0"], [".", "."], [".", "."]],
             [["0", "0"], [".", "."], [".", "."]],
             [["0", "0"], [".", "."], [".", "."]],
             [["0", "0"], [".", "."], [".", "."]],
             [["0", "0"], [".", "."], [".", "."]],
             [["0", "0"], [".", "."], [".", "."]],
             [["0", "0"], [".", "."], [".", "."]],
             [["0", "0"], [".", "."], [".", "."]],
             [["0", "0"], [".", "."], [".", "."]],
             [["0", "0"], [".", "."], [".", "."]],
             [["0", "0"], [".", "."], [".", "."]],
             [["0", "0"], [".", "."], [".", "."]],
             [["0", "0"], [".", "."], [".", "."]],
             [["0", "0"], [".", "."], [".", "."]],
             [["0", "0"], [".", "."], [".", "."]],
             [["0", "0"], [".", "."], [".", "."]],
             [["0", "0"], [".", "."], [".", "."]],
             [["0", "0"], [".", "."], [".", "."]],
             [["0", "0"], [".", "."], [".", "."]],
             [["0", "0"], [".", "."], [".", "."]],
             [["0", "0"], [".", "."], [".", "."]],
             [["0", "0"], [".", "."], [".", "."]],
             [["0", "0"], [".", "."], [".", "."]],
             [["0", "0"], [".", "."], [".", "."]],
             [["0", "0"], [".", "."], [".", "."]],
             [["0", "0"], [".", "."], [".", "."]],
             [["0", "0"], [".", "."], [".", "."]],
             [["0", "0"], [".", "."], [".", "."]],
             [["0", "0"], [".", "."], [".", "."]],
             [["0", "0"], [".", "."], [".", "."]],
             [["0", "0"], [".", "."], [".", "."]],
             [["0", "0"], [".", "."], [".", "."]],
             [["0", "0"], [".", "."], [".", "."]],
             [["0", "0"], [".", "."], [".", "."]],
             [["0", "0"], [".", "."], [".", "."]],
             [["0", "0"], [".", "."], [".", "."]],
             [["0", "0"], [".", "."], [".", "."]],
             [["0", "0"], [".", "."], [".", "."]],
             [["0", "0"], [".", "."], [".", "."]],
             [["0", "0"], [".", "."], [".", "."]],
             [["0", "0"], [".", "."], [".", "."]],
             [["0", "0"], [".", "."], [".", "."]],
             [["0", "0"], [".", "."], [".", "."]],
             [["0", "0"], [".", "."], [".", "."]],
             [["0", "0"], [".", "."], [".", "."]],
             [["0", "0"], [".", "."], [".", "."]],
             [["0", "0"], [".", "."], [".", "."]],
             [["0", "0"], [".", "."], [".", "."]],
             [["0", "0"], [".", "."], [".", "."]],
             [["0", "0"], [".", "."], [".", "."]],
             [["0", "0"], [".", "."], [".", "."]],
             [["0", "0"], [".", "."], [".", "."]],
             [["0", "0"], [".", "."], [".", "."]],
             [["0", "0"], [".", "."], [".", "."]],
             [["0", "0"], [".", "."], [".", "."]],
             [["0", "0"], [".", "."], [".", "."]],
             [["0", "0"], [".", "."], [".", "."]],
             [["0", "0"], [".", "."], [".", "."]],
             [["0", "0"], [".", "."], [".", "."]],
             [["0", "0"], [".", "."], [".", "."]],
             [["0", "0"], [".", "."], [".", "."]],
             [["0", "0"], [".", "."], [".", "."]],
             [["0", "0"], [".", "."], [".", "."]],
             [["0", "0"], [".", "."], [".", "."]],
             [["0", "0"], [".", "."], [".", "."]],
             [["0", "0"], [".", "."], [".", "."]],
             [["0", "0"], [".", "."], [".", "."]],
             [[".", "."], [".", "."], [".", "."]],
             [["0", "0"], [".", "."], [".", "."]],
             [["0", "0"], [".", "."], [".", "."]],
             [["0", "0"], [".", "."], [".", "."]],
             [["0", "0"], [".", "."], [".", "."]],
             [["0", "0"], [".", "."], [".", "."]],
             [["0", "0"], [".", "."], [".", "."]],
             [["0", "0"], [".", "."], [".", "."]],
             [["0", "0"], [".", "."], [".", "."]],
             [["0", "0"], [".", "."], [".", "."]],
             [["0", "0"], [".", "."], [".", "."]],
             [["0", "0"], [".", "."], [".", "."]],
             [["0", "0"], [".", "."], [".", "."]],
             [["0", "0"], [".", "."], [".", "."]],
             [["0", "0"], [".", "."], [".", "."]],
             [["0", "0"], [".", "."], [".", "."]],
             [["0", "0"], [".", "."], [".", "."]],
             [["0", "0"], [".", "."], [".", "."]],
             [["0", "0"], [".", "."], [".", "."]],
             [["0", "0"], [".", "."], [".", "."]],
             [["0", "0"], [".", "."], [".", "."]],
             [["0", "0"], [".", "."], [".", "."]],
             [["0", "0"], [".", "."], [".", "."]],
             [["0", "0"], [".", "."], [".", "."]],
             [["0", "0"], [".", "."], [".", "."]],
             [["0", "0"], [".", "."], [".", "."]],
             [["0", "0"], [".", "."], [".", "."]],
             [["0", "0"], [".", "."], [".", "."]],
             [["0", "0"], [".", "."], [".", "."]],
             [["0", "0"], [".", "."], [".", "."]],
             [["0", "0"], [".", "."], [".", "."]],
             [["0", "0"], [".", "."], [".", "."]],
             [["0", "0"], [".", "."], [".", "."]],
             [["0", "0"], [".", "."], [".", "."]],
             [["0", "0"], [".", "."], [".", "."]],
             [["0", "0"], [".", "."], [".", "."]],
             [["0", "0"], [".", "."], [".", "."]],
             [["0", "0"], [".", "."], [".", "."]],
             [["0", "0"], [".", "."], [".", "."]],
             [["0", "."], [".", "0"], ["0", "."]],
             ]
    expected = "00000000000000000000000000000000000000000000000000000000000000000000000000000000
................................................................................
................................................................................

00000000000000000000000000000000000000000000000000000000000000000000000000000000
................................................................................
................................................................................

000000..000000000000000000000000000000000000000000000000000000000000000000000000
................................................................................
................................................................................

00000.
.....0
....0."

    assert_equal expected, @translator.convert_braille_array_to_string(array)
  end
end
